<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ocean&#39;s blog</title>
  
  <subtitle>我的目标是星辰大海</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-10T01:58:30.320Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ocean</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flink Table 的三种 Sink 模式</title>
    <link href="http://yoursite.com/2020/08/09/Flink-Table-%E7%9A%84%E4%B8%89%E7%A7%8D-Sink-%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/08/09/Flink-Table-%E7%9A%84%E4%B8%89%E7%A7%8D-Sink-%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-08-09T09:13:45.000Z</published>
    <updated>2020-08-10T01:58:30.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flink简介"><a href="#Flink简介" class="headerlink" title="Flink简介"></a>Flink简介</h2><p>&emsp;&emsp;作为计算引擎 Flink 应用的计算结果总要以某种方式输出，比如调试阶段的打印到控制台或者生产阶段的写到数据库。而对于本来就需要在 Flink 内存保存中间及最终计算结果的应用来说，比如进行聚合统计的应用，输出结果便是将内存中的结果同步到外部。就 Flink Table/SQL API 而言，这里的同步会有三种模式，分别是 Append、Upsert 和 Retract。实际上这些输出计算结果的模式并不限于某个计算框架，比如 Storm、Spark 或者 Flink DataStream 都可以应用这些模式，不过 Flink Table/SQL 已有完整的概念和内置实现，更方便讨论。<br><a id="more"></a></p><h2 id="基础原理"><a href="#基础原理" class="headerlink" title="基础原理"></a>基础原理</h2><p>&emsp;&emsp;相信接触过 Streaming SQL 的同学都有了解或者听过流表二象性，简单来说流和表是同一事实的不同表现，是可以相互转换的。流和表的表述在业界不尽相同，笔者比较喜欢的一种是: 流体现事实在时间维度上的变化，而表则体现事实在某个时间点的视图。如果将流比作水管中流动的水，那么表将是杯子里静止的水。</p><p>&emsp;&emsp;将流转换为表的方法对于大多数读者都不陌生，只需将聚合统计函数应用到流上，流很自然就变为表（值得注意的是，Flink 的 Dynamic Table 和表的定义有细微不同，这将在下文讲述）。比如对于一个计算 PV 的简单流计算作业，将用户浏览日志数据流安 url 分类统计，变成 <code>(url, views)</code> 这样的一个表。然而对于如何将表转换成流，读者则未必有这么清晰的概念。</p><p>&emsp;&emsp;假设一个典型的实时流计算应用的工作流程可以被简化为下图:</p><p><a href="http://www.whitewood.me/img/flink-sink-pattern/img1.programing-model.png" target="_blank" rel="noopener"><img src="http://www.whitewood.me/img/flink-sink-pattern/img1.programing-model.png" alt="图1. Flink 编程模型"></a></p><p>&emsp;&emsp;其中很关键的一点是 Transformation 是否聚合类型的计算。若否，则输出结果依然是流，可以很自然地使用原本流处理的 Sink（与外部系统的连接器）；若是，则流会转换为表，那么输出的结果将是表，而一个表的输出通常是批处理的概念，不能直接简单地用流处理的 Sink 来表达。</p><p>&emsp;&emsp;这时有个很朴素的想法是，我们能不能避免批处理那种全量的输出，每次只输出表的 diff，也就是 changelog。这也是表转化为流的方法: 持续观察表的变化，并将每个变化记录成日志输出。因此，流和表的转换可以以下图表示:</p><p><a href="http://www.whitewood.me/img/flink-sink-pattern/img2.stream-table-conversion.png" target="_blank" rel="noopener"><img src="http://www.whitewood.me/img/flink-sink-pattern/img2.stream-table-conversion.png" alt="图2. Flink 编程模型"></a></p><p>&emsp;&emsp;其中表的变化具体可以分为 <code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 三类，而 Flink 根据这些变化类型分别总结了三种结果的输出模式。</p><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">INSERT</th><th style="text-align:left">UPDATE</th><th style="text-align:left">DELETE</th></tr></thead><tbody><tr><td style="text-align:left">Append</td><td style="text-align:left">支持</td><td style="text-align:left">不支持</td><td style="text-align:left">不支持</td></tr><tr><td style="text-align:left">Upsert</td><td style="text-align:left">支持</td><td style="text-align:left">支持</td><td style="text-align:left">支持</td></tr><tr><td style="text-align:left">Retract</td><td style="text-align:left">支持</td><td style="text-align:left">支持</td><td style="text-align:left">支持</td></tr></tbody></table><p>&emsp;&emsp;通常来说 Append 是最容易实现但功能最弱的，Retract 是最难实现而功能最强的。下文分别谈谈三种模式的特点和应用场景。</p><h2 id="Append-输出模式"><a href="#Append-输出模式" class="headerlink" title="Append 输出模式"></a>Append 输出模式</h2><p>&emsp;&emsp;Append 是最为简单的输出模式，只支持追加结果记录的操作。因为结果一旦输出以后便不会再有变更，Append 输出模式的最大特性是不可变性（immutability），而不可变性最令人向往的优势便是安全，比如线程安全或者 Event Sourcing 的可恢复性，不过同时也会给业务操作带来限制。通常来说，Append 模式会用于写入不方便做撤回或者删除操作的存储系统的场景，比如 Kafka 等 MQ 或者打印到控制台。</p><p>&emsp;&emsp;在实时聚合统计中，聚合统计的结果输出是由 Trigger 决定的，而 Append-Only 则意味着对于每个窗口实例（Pane，窗格）Trigger 只能触发一次，则就导致无法在迟到数据到达时再刷新结果。通常来说，我们可以给 Watermark 设置一个较大的延迟容忍阈值来避免这种刷新（再有迟到数据则丢弃），但代价是却会引入较大的延迟。</p><p>&emsp;&emsp;不过对于不涉及聚合的 Table 来说，Append 输出模式是非常好用的，因为这类 Table 只是将数据流的记录按时间顺序排在一起，每条记录间的计算都是独立的。值得注意的是，从 DataFlow Model 的角度来看未做聚合操作的流不应当称为表，但是在 Flink 的概念里所有的流都可以称为 Dynamic Table。笔者认为这个设计也有一定的道理，原因是从流中截取一段出来依然可以满足表的定义，即”某个时间点的视图”，而且我们可以争辩说<code>不聚合</code>也是一种聚合函数。</p><h2 id="Upsert-输出模式"><a href="#Upsert-输出模式" class="headerlink" title="Upsert 输出模式"></a>Upsert 输出模式</h2><p>&emsp;&emsp;Upsert 是 Append 模式的升级版，支持 Append-Only 的操作和在有主键的前提下的 UPDATE 和 DELETE 操作。Upsert 模式依赖业务主键来实现输出结果的更新和删除，因此非常适合 KV 数据库，比如<br>HBase、JDBC 的 TableSink 都使用了这种方式。</p><p>&emsp;&emsp;在底层，Upsert 模式下的结果更新会被翻译为 (Boolean, ROW) 的二元组。其中第一个元素表示操作类型，<code>true</code> 对应 <code>UPSERT</code> 操作（不存在该元素则 <code>INSERT</code>，存在则 <code>UPDATE</code>），<code>false</code> 对应 <code>DELETE</code> 操作，第二个元素则是操作对应的记录。如果结果表本身是 Append-Only 的，第一个元素会全部为 <code>true</code>，而且也无需提供业务主键。</p><p>&emsp;&emsp;Upsert 模式是目前来说比较实用的模式，因为大部分业务都会提供原子或复合类型的主键，而在支持 KV 的存储系统也非常多，但要注意的是不要变更主键，具体原因会在下一节谈到。</p><h2 id="Retract-输出模式"><a href="#Retract-输出模式" class="headerlink" title="Retract 输出模式"></a>Retract 输出模式</h2><p>&emsp;&emsp;Retract 是三种输出模式中功能最强大但实现也最复杂的一种，它要求目标存储系统可以追踪每个条记录，而且这些记录至少在一定时间内都是可以撤回的，因此通常来说它会自带系统主键，不必依赖于业务主键。然而由于大数据存储系统很少有可以精确到一条记录的更新操作，因此目前来说至少在 Flink 原生的 TableSink 中还没有能在生产环境中满足这个要求的。</p><p>&emsp;&emsp;不同于 Upsert 模式更新时会将整条记录重新输出，Retract 模式会将更新分成两条表示增减量的消息，一条是 <code>(false, OldRow)</code> 的撤回（Retract）操作，一条是 <code>(true, NewRow)</code> 的积累（Accumulate）操作。这样的好处是，在主键出现变化的情况下，<code>Upsert</code> 输出模式无法撤回旧主键的记录，导致数据不准确，而 <code>Retract</code> 模式则不存在这个问题。</p><p>&emsp;&emsp;举个例子，假设我们将电商订单按照承运快递公司进行分类计数，有如下的结果表。</p><table><thead><tr><th style="text-align:left">公司</th><th style="text-align:left">订单数</th></tr></thead><tbody><tr><td style="text-align:left">中通</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">圆通</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">顺丰</td><td style="text-align:left">3</td></tr></tbody></table><p>&emsp;&emsp;那么如果原本一单为中通的快递，后续更新为用顺丰发货，对于 Upsert 模式会产生 <code>(true, (顺丰, 4))</code> 这样一条 changelog，但中通的订单数没有被修正。相比之下，Retract 模式产出 <code>(false, (中通, 1))</code> 和 <code>(true, (顺丰, 1))</code> 两条数据，则可以正确地更新数据。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;Flink Table Sink 的三种模式本质上是如何监控结果表并产生 changelog，这可以应用于所有需要将表转为流的场景，包括同一个 Flink 应用的不同表间的联动。三种模式中 Append 模式只支持表的 <code>INSERT</code>，最为简单；Upsert 模式依赖业务主键提供 <code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 全部三类变更，比较实用；Retract 模式同样支持三类变更且不要求业务主键，但会将 <code>UPDATE</code> 翻译为旧数据的撤回和新数据的累加，实现上比较复杂。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Flink简介&quot;&gt;&lt;a href=&quot;#Flink简介&quot; class=&quot;headerlink&quot; title=&quot;Flink简介&quot;&gt;&lt;/a&gt;Flink简介&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;作为计算引擎 Flink 应用的计算结果总要以某种方式输出，比如调试阶段的打印到控制台或者生产阶段的写到数据库。而对于本来就需要在 Flink 内存保存中间及最终计算结果的应用来说，比如进行聚合统计的应用，输出结果便是将内存中的结果同步到外部。就 Flink Table/SQL API 而言，这里的同步会有三种模式，分别是 Append、Upsert 和 Retract。实际上这些输出计算结果的模式并不限于某个计算框架，比如 Storm、Spark 或者 Flink DataStream 都可以应用这些模式，不过 Flink Table/SQL 已有完整的概念和内置实现，更方便讨论。&lt;br&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Flink" scheme="http://yoursite.com/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://yoursite.com/2019/04/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/04/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2019-04-22T02:41:35.000Z</published>
    <updated>2019-04-26T03:32:06.379Z</updated>
    
    <content type="html"><![CDATA[<p> &emsp;&emsp;最近都在和Linux打交道，我觉得Linux相比windows比较麻烦的就是很多东西都要用命令来控制，当然，这也是很多人喜欢Linux的原因，比较短小但却功能强大。<br><a id="more"></a></p><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir test        创建文件夹</span><br><span class="line">rm -rf /test      删除文件夹</span><br><span class="line">cd /test          切换文件夹</span><br><span class="line">pwd               查看文件夹路径</span><br><span class="line">cp -r test /root  拷贝文件夹目录</span><br><span class="line">mv test /root     移动文件夹、更改文件夹的名字</span><br><span class="line">ls ll          查看文件夹下文件</span><br></pre></td></tr></table></figure><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">touch test.txt    新建文件</span><br><span class="line">cp test.txt newtest.txt 复制文件</span><br><span class="line">rm -f test.txt    删除文件</span><br><span class="line">cat test.txt      查看文件内容</span><br><span class="line">more test.txt     分屏显示文件内容  空格键显示下一页内容，B键显示上一页内容，Q键退出</span><br><span class="line">head -10 test.txt 打印文件1-10行</span><br><span class="line">tail -10 test.txt 打印最后10行内容</span><br><span class="line">tail -f test.txt  实时打印文件内容</span><br><span class="line">find 路径 -name test.txt 查找文件或目录，列出路径，可以使用正则表达式查找</span><br></pre></td></tr></table></figure><h2 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi/vim"></a>vi/vim</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">命令行模式 </span><br><span class="line">:w保存  </span><br><span class="line">:q退出  </span><br><span class="line">:q!不保存强制退出  </span><br><span class="line">:set nu显示行号 </span><br><span class="line">:/单词查找匹配</span><br><span class="line">:N,Md 删除N-M行数据</span><br><span class="line">一般模式：   </span><br><span class="line">yy复制当前行 </span><br><span class="line">    nyy复制下面n行 </span><br><span class="line">    p粘贴到下一行 P粘贴到上一行</span><br><span class="line">G移动到最后一行</span><br><span class="line">nG移动到第n行</span><br><span class="line">n+光标下移n行 </span><br><span class="line">    n-光标上移n行 </span><br><span class="line">H光标移动到屏幕顶行 </span><br><span class="line">    M光标移动到屏幕中间行 </span><br><span class="line">    L光标移动到屏幕最后行</span><br><span class="line">dd删除行   </span><br><span class="line">x删除光标后一个字符 X删除光标前一个字符 </span><br><span class="line">u恢复前一个动作</span><br></pre></td></tr></table></figure><h2 id="远程拷贝"><a href="#远程拷贝" class="headerlink" title="远程拷贝"></a>远程拷贝</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp [-r] test.txt root@node02:`pwd`   本地到远程</span><br><span class="line">scp [-r] root@node02:/test /root/     远程到本地</span><br></pre></td></tr></table></figure><h2 id="磁盘指令"><a href="#磁盘指令" class="headerlink" title="磁盘指令"></a>磁盘指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df [-m][-k][-h]      查看硬盘信息</span><br><span class="line">du [-k][-m][-a][-h][-max-depth=0] /目录    查看目录信息</span><br></pre></td></tr></table></figure><h2 id="网络指令"><a href="#网络指令" class="headerlink" title="网络指令"></a>网络指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ifconfig                          查看网络配置</span><br><span class="line">ping ip地址                        查看是否连通</span><br><span class="line">netstat                           查看网络相关信息</span><br><span class="line">telnet 192.168.198.111 22         测试远程主机网络端口  Ctrl+]   输入q退出</span><br><span class="line">curl -X GET http://www.baidu.com/ http请求模拟</span><br></pre></td></tr></table></figure><p>​          </p><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">*用户操作指令：</span><br><span class="line">useradd ocean     添加用户，创建一个组</span><br><span class="line">passwd ocean      修改密码</span><br><span class="line">useradd -r ocean  删除用户</span><br><span class="line">usermod -l newocean ocean 修改用户名</span><br><span class="line">usermod -L ocean  锁定账号</span><br><span class="line">usermod -U ocean  解锁账号</span><br><span class="line">/etc/passwd   /etc/shodow    查看用户</span><br><span class="line">*用户组操作指令：</span><br><span class="line">groupadd groupname创建用户组</span><br><span class="line">groupdel groupname删除用户组</span><br><span class="line">groupmod -n newname name 修改用户组名</span><br><span class="line">groups   查看当前登录用户的组内成员</span><br><span class="line">groups ocean   查看指定用户所在组</span><br><span class="line">usermod [-g][-G] 组名 用户   修改用户的主组或者附加组</span><br><span class="line">cat /etc/group 查看组</span><br><span class="line"></span><br><span class="line">*文件权限：</span><br><span class="line">UGO模型：USER  GROUP  OTHER</span><br><span class="line">chown -R user:group 目录名字   修改整个目录下的所有者和属组</span><br><span class="line">chmod ugo+rwx test.txt  修改文件的权限</span><br><span class="line">chmod 700 test.txt  设置权限</span><br><span class="line"></span><br><span class="line">*系统服务初始化配置：</span><br><span class="line">0：停机状态</span><br><span class="line">1：单用户模式</span><br><span class="line">2：多用户</span><br><span class="line">3：完全多用户</span><br><span class="line">4：为定义</span><br><span class="line">5：图形化</span><br><span class="line">6：停止所有进程，重启</span><br><span class="line"></span><br><span class="line">*系统时间指令：</span><br><span class="line">date 查看时间</span><br><span class="line">date -s 时间  修改时间</span><br><span class="line">时间同步：</span><br><span class="line">yum -y install ntp</span><br><span class="line">ntpdate cn.ntp.org.cn</span><br><span class="line"></span><br><span class="line">*配置主机名：   </span><br><span class="line">vim /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line">*配置域名映射： </span><br><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line">*sudo权限配置： </span><br><span class="line">vim /etc/sudoers</span><br><span class="line">sudo -l</span><br><span class="line"></span><br><span class="line">*环境变量：</span><br><span class="line">vim /etc/profile   全局</span><br><span class="line">echo $path  显示环境变量</span><br><span class="line">source /etc/profile  重新加载环境变量</span><br><span class="line">vi  ~/.bash_profile  临时</span><br><span class="line">  </span><br><span class="line">*防火墙：</span><br><span class="line">service iptables status查看状态</span><br><span class="line">    chkconfig iptables on/off 永久生效</span><br><span class="line">    service iptables start 即时生效</span><br></pre></td></tr></table></figure><h2 id="重定向和管道"><a href="#重定向和管道" class="headerlink" title="重定向和管道"></a>重定向和管道</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输出重定向：&gt;    &gt;&gt;</span><br><span class="line">输入重定向：&lt;    &lt;&lt;</span><br><span class="line">标准输出重定向：  1&gt;</span><br><span class="line">错误输出重定向：  2&gt;</span><br><span class="line">结合使用：2&gt;&amp;1</span><br><span class="line">管道： |</span><br><span class="line">命令执行控制：&amp;&amp; 前一个命令执行成功才会执行后一个命令</span><br><span class="line">|| 前一个命令执行失败才会执行后一个命令</span><br><span class="line">信息黑洞：/dev/null</span><br></pre></td></tr></table></figure><h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">定义变量：name=&quot;ocean&quot;</span><br><span class="line">引用变量：$name</span><br><span class="line">数组：my_array=&#123;A,B,C,D&#125;        $&#123;my_array[0]&#125;</span><br><span class="line">运算符：</span><br><span class="line">表达式和运算符之间必须有空格</span><br><span class="line">完整的表达式要被 ` ` 包含</span><br><span class="line">val=`expr $a + $b` </span><br><span class="line">val=`expr $a - $b`</span><br><span class="line">val=`expr $a \* $b` </span><br><span class="line">val=`expr $b / $a` </span><br><span class="line">val=`expr $b % $a`</span><br><span class="line">$a == $b</span><br><span class="line">$a != $b</span><br><span class="line">-eq是否相等   -ne是否不相等   -gt左边是否大于右边   -lt左边是否小于右边    -ge左边是大于等于右边    -le左边是否小于等于右边</span><br><span class="line">&amp;&amp;   ||</span><br><span class="line">=字符串是否相等   !=是否不想等   -z长度是否为0   -n长度是否不为0    str是否为不为空</span><br><span class="line">流程控制</span><br><span class="line">函数test()&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="服务指令"><a href="#服务指令" class="headerlink" title="服务指令"></a>服务指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">列出所有服务   chkconfig   </span><br><span class="line">service 服务名  start/stop/status/restart</span><br><span class="line">添加服务   /etc/init.d系统各种服务的启动和停止脚本</span><br><span class="line"> /etc/rc.d/ 系统对应执行级别的服务软连接</span><br><span class="line">步骤：在脚本中添加两行代码#chkconfig: 2345 80 90 #description:auto_run </span><br><span class="line"> 编写脚本</span><br><span class="line"> 修改可执行权限</span><br><span class="line"> 将脚本拷贝到/etc/init.d目录下</span><br><span class="line"> 加入到服务里chkconfig --add test.sh</span><br><span class="line"> 重启服务器</span><br><span class="line">删除服务：chkconfig --del name</span><br><span class="line">服务等级更改：chkconfig --level 2345 name off|on   默认是2345</span><br></pre></td></tr></table></figure><h2 id="定时调度"><a href="#定时调度" class="headerlink" title="定时调度"></a>定时调度</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">minute hour day month dayofweek 命令</span><br><span class="line">查看定时任务：/var/spool/mail  目录下放各用户定时任务，执行后的信息</span><br><span class="line">/var/spool/cron 目录存放每个用户的定时任务</span><br><span class="line">contab –l 可以直接查看当前用户的定时任务</span><br></pre></td></tr></table></figure><h2 id="linux安全"><a href="#linux安全" class="headerlink" title="linux安全"></a>linux安全</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">selinux  enforcing强制模式</span><br><span class="line"> permissive宽容模式</span><br><span class="line"> disabled关闭</span><br><span class="line">sestatus -v查看状态</span><br></pre></td></tr></table></figure><h2 id="linux进程"><a href="#linux进程" class="headerlink" title="linux进程"></a>linux进程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ps -aux查看进程   jobs -l</span><br><span class="line">ps -ef | grep ssh查看相关进程</span><br><span class="line">ps -aux --sort -pcpu根据CPU使用来升序排列</span><br><span class="line">top性能分析</span><br><span class="line">nohup /root/start.h &amp;  后台运行</span><br><span class="line">kill -9 杀死进程</span><br></pre></td></tr></table></figure><h2 id="解压压缩下载"><a href="#解压压缩下载" class="headerlink" title="解压压缩下载"></a>解压压缩下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum下载</span><br><span class="line">wget下载</span><br><span class="line">RPM命令：rpm  –ivh  rpm包  安装</span><br><span class="line">rpm -q ntp        查找</span><br><span class="line">rpm –e 包名       卸载</span><br><span class="line">tar命令：tar  -zvxf  xxxx.tar.gz       解压</span><br><span class="line">tar -zcf 压缩包命名 压缩目标  压缩</span><br><span class="line">zip命令：zip -r 包名 目标目录    压缩</span><br><span class="line">unzip filename          解压</span><br></pre></td></tr></table></figure><p>​<br>​<br>​              </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &amp;emsp;&amp;emsp;最近都在和Linux打交道，我觉得Linux相比windows比较麻烦的就是很多东西都要用命令来控制，当然，这也是很多人喜欢Linux的原因，比较短小但却功能强大。&lt;br&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客搭建</title>
    <link href="http://yoursite.com/2019/04/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/04/16/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2019-04-16T07:25:46.000Z</published>
    <updated>2019-04-28T11:01:03.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;最近一段时间比较闲，想着搭个博客玩玩，看了网上主流的博客网站，不是太喜欢，作为一个互联网行业的小渣渣，博客当然要自己搭才有意思了，于是在网上找了一些方案，最终选择了<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>+<a href="https://github.com/" target="_blank" rel="noopener">github</a>的方式来搭建个人博客。</p><p><img src="https://i.loli.net/2019/04/28/5cc54dc5075b4.png" alt></p><a id="more"></a><p>&emsp;&emsp;使用<strong>github pages</strong>服务搭建博客的好处有：</p><ol><li>全是静态文件，访问速度快；</li><li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li><li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li><li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>&emsp;&emsp;在你的博客之旅开始之前，首先要创建<strong>github</strong>账号，这个不做过多的介绍。登录你的github账户，创建一个名为<strong>你的用户名.github.io</strong>的仓库，将来你的博客访问地址就是这个啦。你也可以购买域名替换你的博客地址，当然这是要花钱的。</p><p>&emsp;&emsp;仓库建好后，我们需要在电脑上安装<strong>git</strong>和<strong>node.js</strong>，在这里要注意Git要提前配置好，和github做绑定，以后要用git工具将代码提交到github上保存的哦。<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a> 因为整个博客框架是基于node.js的，所以必须安装node.js环境，安装过程中一路Next即可。</p><h2 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h2><p>&emsp;&emsp;准备工作做好后，我们就可以正式开始博客的搭建。<strong>Hexo</strong> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>&emsp;&emsp;在桌面鼠标右键，选择Git Bash Here，在弹出的Git命令窗口中输入安装命令，然后回车。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>​&emsp;&emsp;选择一个盘创建一个文件夹，在新建的文件夹内鼠标右键，选择Git Bash Here，输入初始化命令，然后回车，等命令执行完，就会看到生成了一系列的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接着在该文件夹中继续执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;命令执行完后浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 或者 127.0.0.1:4000 ,就会看到hexo的初始界面，是不是有着一丝丝的成就感？但是，这个界面还是在本地，别人并不能看到，想要别人看到，我们就必须将这些文件部署到Github上去。</p><p>&emsp;&emsp;前面我们已经在github上创建好了博客仓库，接下来我们编辑博客文件夹下的<strong>_config.yml</strong>文件，在文件最后找到关键字<strong>deploy</strong>，对其进行编辑，其中<strong>repo</strong>后面的值要改成你的仓库地址，注意键值对之间要有空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/ocean233/ocean233.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;保存修改后，如果前面你的git已经可以推送文件到github上的话，你就可以直接执行以下命令将你的博客部署到GitHub上面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;但是输入hexo d可能会报ERROR Deployer not fount： git错误，这是因为没有安装hexo-deployer-git这个模块，导致Git不能识别该命令，输入下面指令安装该模块即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;安装该模块会有些慢，因为Github毕竟是国外的网站，并不是很稳定，所以大家要耐心等待。安装失败时的话大家多试两遍。等模块安装完再次执行<strong>hexo d</strong>，这时就会有弹出框，输入自己之前注册的github账号进行登录，然后命令行也会要你输入对应的用户名并弹出输入框让你输入密码，填写完毕敲回车即可正确部署。</p><p>&emsp;&emsp;在浏览器输入<strong>你的用户名.github.io</strong>即可看到你自己搭建的博客了哦，如果上面的步骤都没问题，但是没有看到博客的话，可能是有些延迟，大家等等就好。</p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>&emsp;&emsp;搭建好的博客还很简单，博客样式说实话也是有点丑的，后面我们可以更换博客的主题，让博客更有特色。现在我们先来修改一下博客的基本配置吧。</p><p>&emsp;&emsp;对博客的配置修改主要是对配置文件<strong>_config.yml</strong>进行修改，我们现在的博客还很简单，所以能做的配置并不多，大家可以参考官网上的一些配置信息<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration</a> ，我也会列几个主要配置供大家参考。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Ocean&apos;s blog</span><br><span class="line">subtitle: 我的目标是星辰大海</span><br><span class="line">description: 大数据技术博客</span><br><span class="line">keywords:</span><br><span class="line">author: Ocean</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里大家可以修改博客的标题信息等，这是大家对博客进行定制化的第一步。</p><h2 id="编写文章"><a href="#编写文章" class="headerlink" title="编写文章"></a>编写文章</h2><p>&emsp;&emsp;我们搭建博客的主要目的自然是为了向大家分享我们的博客内容，绝对不是为了装B，所以如何写一篇文章才是我们应该关注的重点。</p><p>&emsp;&emsp;在你的博客文件夹目录下鼠标右键，点击Git Bash Here，接下来命令敲起来，新建一篇文章。如果没有设置 layout 的话，默认使用<strong>_config.yml</strong>中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这时候在/博客目录/source/posts目录下可以看到新建的博客文章，以.md结尾，在这里大家可以使用markdown语法编写自己的博客内容。</p><p><img src="https://i.loli.net/2019/04/28/5cc55d24c29d4.png" alt></p><p>&emsp;&emsp;博客内容写好后，回到命令行界面，敲命令将我们的博客内容部署到github上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;如果你想先看看编写的博客文章是怎样的，可以会用<strong>hexo s</strong>命令，在本地浏览器上先查看，没问题了再部署到github上。到这里，博客的基本操作你就已经熟悉了，可以开始玩转hexo了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近一段时间比较闲，想着搭个博客玩玩，看了网上主流的博客网站，不是太喜欢，作为一个互联网行业的小渣渣，博客当然要自己搭才有意思了，于是在网上找了一些方案，最终选择了&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt;+&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;的方式来搭建个人博客。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/28/5cc54dc5075b4.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
